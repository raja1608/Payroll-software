/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oca.project;

import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author 90048753
 */
public class PerDetContDataEntryForm extends javax.swing.JFrame {

    /**
     * Creates new form PerDetContDataEntryForm
     */
    ArrayList<Person> personList;
    private int fortnightlyPeriodCount = 0;
    private int monthlyPeriodCount = 0;
    MainForm mainform = new MainForm();
    
   
    
    public PerDetContDataEntryForm() {
        initComponents();
    }
    
    // this method gets the list of person from the MainForm and sets it in personList       
    public void setList(ArrayList<Person> inputlist){
        this.personList = inputlist;
    }
    
    public void populateNameComboBox(){
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        for(Person person:personList){
            if(person instanceof CEO){ 
            }
            else{
                model.addElement(person);
            }
        }
        this.cboName.setModel(model);
    } 
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        msgOptionPane = new javax.swing.JOptionPane();
        jLabel1 = new javax.swing.JLabel();
        btnCreateFortnightlyPayments = new javax.swing.JButton();
        btnCreateMonthlyPayment = new javax.swing.JButton();
        lblPersonalInformation = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblDateOfBirth = new javax.swing.JLabel();
        lblStartDate = new javax.swing.JLabel();
        lblContractor = new javax.swing.JLabel();
        lblTimePeriod = new javax.swing.JLabel();
        lblSalariedWorker = new javax.swing.JLabel();
        lblBaseSalary = new javax.swing.JLabel();
        lblContractorWorker = new javax.swing.JLabel();
        lblStartDateOfPayPeriod = new javax.swing.JLabel();
        lblHoursOfWork = new javax.swing.JLabel();
        lblHourlyRate = new javax.swing.JLabel();
        cboName = new javax.swing.JComboBox();
        txtDateOfBirth = new javax.swing.JTextField();
        txtStartDate = new javax.swing.JTextField();
        cboTimePeriod = new javax.swing.JComboBox();
        txtBaseSalary = new javax.swing.JTextField();
        txtStartDateOfPayperiod = new javax.swing.JTextField();
        txtHourOfWork = new javax.swing.JTextField();
        txtHourlyRate = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstContractor = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add Payments");

        btnCreateFortnightlyPayments.setText("Create Fortnightly Payments");
        btnCreateFortnightlyPayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateFortnightlyPaymentsActionPerformed(evt);
            }
        });

        btnCreateMonthlyPayment.setText("Create Monthly Payment");
        btnCreateMonthlyPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateMonthlyPaymentActionPerformed(evt);
            }
        });

        lblPersonalInformation.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblPersonalInformation.setText("Personal Information");

        lblName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblName.setText("Name:");

        lblDateOfBirth.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblDateOfBirth.setText("Date of Birth:");

        lblStartDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblStartDate.setText("Start Date:");

        lblContractor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblContractor.setText("Contractor:");

        lblTimePeriod.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTimePeriod.setText("Time Period:");

        lblSalariedWorker.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblSalariedWorker.setText("Salaried Worker");

        lblBaseSalary.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblBaseSalary.setText("Base Salary:");

        lblContractorWorker.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblContractorWorker.setText("Contractor Worker");

        lblStartDateOfPayPeriod.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblStartDateOfPayPeriod.setText("Start Date of pay period:");

        lblHoursOfWork.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblHoursOfWork.setText("Hours of Work:");

        lblHourlyRate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblHourlyRate.setText("Hourly Rate:");

        cboName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboNameActionPerformed(evt);
            }
        });

        txtHourlyRate.setEditable(false);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lstContractor.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "YES", "NO" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstContractor.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstContractor.setEnabled(false);
        jScrollPane1.setViewportView(lstContractor);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCreateMonthlyPayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCreateFortnightlyPayments, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDateOfBirth)
                            .addComponent(lblName)
                            .addComponent(lblStartDate)
                            .addComponent(lblContractor)
                            .addComponent(lblTimePeriod)
                            .addComponent(lblSalariedWorker)
                            .addComponent(lblBaseSalary)
                            .addComponent(lblContractorWorker)
                            .addComponent(lblStartDateOfPayPeriod)
                            .addComponent(lblHoursOfWork)
                            .addComponent(lblHourlyRate)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBaseSalary)
                                    .addComponent(txtDateOfBirth)
                                    .addComponent(txtStartDateOfPayperiod)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnBack))
                                    .addComponent(cboTimePeriod, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cboName, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 2, Short.MAX_VALUE)))
                                .addGap(56, 56, 56))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtHourOfWork)
                                    .addComponent(txtHourlyRate, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtStartDate)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblPersonalInformation)
                        .addGap(157, 157, 157))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPersonalInformation)
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblName)
                            .addComponent(cboName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDateOfBirth)
                            .addComponent(txtDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCreateFortnightlyPayments, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStartDate)
                            .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblContractor)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTimePeriod)
                            .addComponent(cboTimePeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addComponent(lblSalariedWorker)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBaseSalary)
                            .addComponent(txtBaseSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lblContractorWorker)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblStartDateOfPayPeriod)
                            .addComponent(txtStartDateOfPayperiod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHoursOfWork)
                            .addComponent(txtHourOfWork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHourlyRate)
                            .addComponent(txtHourlyRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnBack))
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(btnCreateMonthlyPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jSeparator1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void cboNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboNameActionPerformed
        Person employee = (Person)cboName.getSelectedItem();
  
        txtDateOfBirth.setText(employee.getDateOfBirth().toString());
        txtStartDate.setText(employee.getDateStarted().toString());
        
         if(employee instanceof ContractSubordinate){
            lblSalariedWorker.setVisible(false);
            lblBaseSalary.setVisible(false);
            txtBaseSalary.setVisible(false);
            lblContractorWorker.setVisible(true);
            lblStartDateOfPayPeriod.setVisible(true);
            lblHoursOfWork.setVisible(true);
            lblHourlyRate.setVisible(true);
            txtStartDateOfPayperiod.setVisible(true);
            txtHourOfWork.setVisible(true);
            txtHourlyRate.setVisible(true);
            btnAdd.setVisible(true);
            lstContractor.setSelectedIndex(0);
            
            DefaultComboBoxModel model = new DefaultComboBoxModel(); 
            TimePeriods selected = ((ContractSubordinate)employee).getTimePeriod();       
            model.addElement(selected);
            cboTimePeriod.setModel(model); 
            
            if(employee instanceof SalesConsultant){
                txtHourlyRate.setText("27.50");
            }
            else{
                txtHourlyRate.setText("25");
            }
            
        }
         else{
            lblSalariedWorker.setVisible(true);
            lblBaseSalary.setVisible(true);
            txtBaseSalary.setVisible(true);
            lblContractorWorker.setVisible(false);
            lblStartDateOfPayPeriod.setVisible(false);
            lblHoursOfWork.setVisible(false);
            lblHourlyRate.setVisible(false);
            txtStartDateOfPayperiod.setVisible(false);
            txtHourOfWork.setVisible(false);
            txtHourlyRate.setVisible(false);
            btnAdd.setVisible(false);
            lstContractor.setSelectedIndex(1);
            
            DefaultComboBoxModel model = new DefaultComboBoxModel(); 
            if(employee instanceof Manager){
            TimePeriods selected = ((Manager)employee).getTimePeriod();       
            model.addElement(selected);
            cboTimePeriod.setModel(model);
            txtBaseSalary.setText(Double.toString(((Manager)employee).getBaseSalary()));
            }   
            else if(employee instanceof SalariedSubordinate){
                TimePeriods selected = ((SalariedSubordinate)employee).getTimePeriod();       
                model.addElement(selected);
                cboTimePeriod.setModel(model); 
                txtBaseSalary.setText(Double.toString(((SalariedSubordinate)employee).getBaseSalary()));
            }
        }    
    }//GEN-LAST:event_cboNameActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if(txtHourOfWork.getText().equals("") && txtStartDateOfPayperiod.getText().equals("")){
             msgOptionPane.showMessageDialog(this,"Enter the Start date of the pay period and the Number of hours worked", 
                    "Error",javax.swing.JOptionPane.ERROR_MESSAGE); 
        }
        else{
            Person employee = (Person)cboName.getSelectedItem();
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            try{
                Date startDate = new Date();
                startDate = df.parse(txtStartDateOfPayperiod.getText());              
                Double pay = ((ContractSubordinate)employee).CalculatePay(startDate, Double.parseDouble(txtHourOfWork.getText()));
                //System.out.println(pay);
                PayrollReportItem payroll = new PayrollReportItem(employee, pay, startDate, TimePeriods.MONTHLY);
                MainForm.addMonthlyPayment(payroll);
                msgOptionPane.showMessageDialog(this,"Contract payment has been added", 
                    "Announcement",javax.swing.JOptionPane.INFORMATION_MESSAGE); 
            }
            catch(ParseException pe){
                pe.printStackTrace();
            }
            catch(Exception e){
                e.printStackTrace();
            }
        }
           
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnCreateFortnightlyPaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateFortnightlyPaymentsActionPerformed
 
        Date defaultDate = new Date();
        
        for(Person person:personList){
            
            if(person instanceof Manager){
                if(TimePeriods.FORTNIGHTLY == ((Manager)person).getTimePeriod() ){
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    try{
                        defaultDate = df.parse("01/01/2015");
                        defaultDate = DateUtil.addDays(defaultDate,fortnightlyPeriodCount);
                        Double pay = ((Manager)person).CalculatePay(defaultDate,80.00);
                        PayrollReportItem payroll = new PayrollReportItem(person, pay, defaultDate, TimePeriods.FORTNIGHTLY);
                        //System.out.println(payroll);
                        MainForm.addFortnightPayment(payroll);
                    }
                    catch(ParseException pe){
                        pe.printStackTrace();
                    }
                    catch(Exception e){
                    e.printStackTrace();
                    }
                }
            }
            else if(person instanceof SalariedSubordinate){
                if(TimePeriods.FORTNIGHTLY == ((SalariedSubordinate)person).getTimePeriod() ){
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    try{
                        defaultDate = df.parse("01/01/2015");
                        defaultDate = DateUtil.addDays(defaultDate,fortnightlyPeriodCount);
                        Double pay = ((SalariedSubordinate)person).CalculatePay(defaultDate,80.00);
                        PayrollReportItem payroll = new PayrollReportItem(person, pay, defaultDate, TimePeriods.FORTNIGHTLY);
                       // System.out.println(payroll);
                        MainForm.addFortnightPayment(payroll);
                    }
                    catch(ParseException pe){
                        pe.printStackTrace();
                    }
                    catch(Exception e){
                    e.printStackTrace();
                    }
                }
            }
            
        }
         msgOptionPane.showMessageDialog(this,"Fortnightly payments have been added for " + defaultDate, 
                    "Announcement",javax.swing.JOptionPane.INFORMATION_MESSAGE); 
         fortnightlyPeriodCount = fortnightlyPeriodCount + 14;
    }//GEN-LAST:event_btnCreateFortnightlyPaymentsActionPerformed

    private void btnCreateMonthlyPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateMonthlyPaymentActionPerformed
        
        Date defaultDate = new Date();
        
        for(Person person:personList){
            
            if(person instanceof Manager){
                if(TimePeriods.MONTHLY == ((Manager)person).getTimePeriod() ){
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    try{
                        defaultDate = df.parse("01/01/2015");
                        defaultDate = DateUtil.addMonths(defaultDate, monthlyPeriodCount);
                        Double pay = ((Manager)person).CalculatePay(defaultDate,80.00);
                        PayrollReportItem payroll = new PayrollReportItem(person, pay, defaultDate, TimePeriods.MONTHLY);
                        //System.out.println(payroll);
                        MainForm.addMonthlyPayment(payroll);
                    }
                    catch(ParseException pe){
                        pe.printStackTrace();
                    }
                    catch(Exception e){
                    e.printStackTrace();
                    }
                }
            }
            else if(person instanceof SalariedSubordinate){
                if(TimePeriods.MONTHLY == ((SalariedSubordinate)person).getTimePeriod() ){
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    try{
                        defaultDate = df.parse("01/01/2015");
                        defaultDate = DateUtil.addMonths(defaultDate, monthlyPeriodCount);
                        Double pay = ((SalariedSubordinate)person).CalculatePay(defaultDate,80.00);
                        PayrollReportItem payroll = new PayrollReportItem(person, pay, defaultDate, TimePeriods.MONTHLY);
                        //System.out.println(payroll);
                        MainForm.addMonthlyPayment(payroll);
                    }
                    catch(ParseException pe){
                        pe.printStackTrace();
                    }
                    catch(Exception e){
                    e.printStackTrace();
                    }
                }
            }
            else if(person instanceof CEO){
                if(TimePeriods.MONTHLY == ((CEO)person).getTimeperiod()){
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    try{
                        defaultDate = df.parse("01/01/2015");
                        defaultDate = DateUtil.addMonths(defaultDate, monthlyPeriodCount);
                        Double pay = ((CEO)person).CalculatePay(defaultDate,80.00);//80 is a dummy value
                        PayrollReportItem payroll = new PayrollReportItem(person, pay, defaultDate, TimePeriods.MONTHLY);
                        //System.out.println(payroll);
                        MainForm.addMonthlyPayment(payroll);
                    }
                    catch(ParseException pe){
                        pe.printStackTrace();
                    }
                    catch(Exception e){
                    e.printStackTrace();
                    }
                }
            }
            
        }
         msgOptionPane.showMessageDialog(this,"Monthly payments have been added for " + defaultDate, 
                    "Announcement",javax.swing.JOptionPane.INFORMATION_MESSAGE); 
         monthlyPeriodCount++;
    }//GEN-LAST:event_btnCreateMonthlyPaymentActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PerDetContDataEntryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PerDetContDataEntryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PerDetContDataEntryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PerDetContDataEntryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PerDetContDataEntryForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreateFortnightlyPayments;
    private javax.swing.JButton btnCreateMonthlyPayment;
    private javax.swing.JComboBox cboName;
    private javax.swing.JComboBox cboTimePeriod;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblBaseSalary;
    private javax.swing.JLabel lblContractor;
    private javax.swing.JLabel lblContractorWorker;
    private javax.swing.JLabel lblDateOfBirth;
    private javax.swing.JLabel lblHourlyRate;
    private javax.swing.JLabel lblHoursOfWork;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPersonalInformation;
    private javax.swing.JLabel lblSalariedWorker;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JLabel lblStartDateOfPayPeriod;
    private javax.swing.JLabel lblTimePeriod;
    private javax.swing.JList lstContractor;
    private javax.swing.JOptionPane msgOptionPane;
    private javax.swing.JTextField txtBaseSalary;
    private javax.swing.JTextField txtDateOfBirth;
    private javax.swing.JTextField txtHourOfWork;
    private javax.swing.JTextField txtHourlyRate;
    private javax.swing.JTextField txtStartDate;
    private javax.swing.JTextField txtStartDateOfPayperiod;
    // End of variables declaration//GEN-END:variables
}
